import customtkinter as ctk
from tkinter import filedialog, messagebox
import os
import threading
from datetime import datetime
import sys
from io import StringIO
import contextlib

# Importar m√≥dulos de automa√ß√£o
try:
    from beneficiarios.ler_excel import read_excel as beneficiarios_read
    from beneficiarios.append_excel import append_to_excel_formatado as beneficarios_append
    from procedimentos.ler_excel import read_excel as procedimentos_read
    from procedimentos.append_excel import append_to_excel_formatado as procedimentos_append
    from prestadores.ler_excel import read_excel as prestadores_read
    from prestadores.append_excel import append_to_excel_formatado as prestadores_append
    from consultas.ler_excel import read_excel as consultas_read
    from consultas.append_excel import append_to_excel_formatado as consultas_append
    from diagnosticos.ler_excel import read_excel as diagnosticos_read
    from diagnosticos.append_excel import append_to_excel_formatado as diagnosticos_append
    from exames.ler_excel import read_excel as exames_read
    from exames.append_excel import append_to_excel_formatado as exames_append
    from terapias.ler_excel import read_excel as terapias_read
    from terapias.append_excel import append_to_excel_formatado as terapias_append
    MODULOS_DISPONIVEL = True
except ImportError as e:
    print(f"Aviso: M√≥dulos de benefici√°rios n√£o encontrados: {e}")
    MODULOS_DISPONIVEL = False

# Configura√ß√£o do tema personalizado
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class AutomacaoBradescoApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # Configura√ß√µes da janela
        self.title("üè¶ Sistema de Automa√ß√£o Bradesco PME")
        self.geometry("900x700")
        self.resizable(True, True)
        self.minsize(800, 600)
        
        # Vari√°veis de controle
        self.arquivo_selecionado = None
        self.executando = False
        
        # Configurar grid principal
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        
        self.criar_interface()
        
    def criar_interface(self):
        # ========== HEADER PRINCIPAL ==========
        self.criar_header()
        
        # ========== CONTAINER PRINCIPAL ==========
        self.main_container = ctk.CTkScrollableFrame(self, corner_radius=0)
        self.main_container.grid(row=1, column=0, sticky="nsew", padx=20, pady=(10, 20))
        self.main_container.grid_columnconfigure(0, weight=1)
        
        # ========== SE√á√ïES DA INTERFACE ==========
        self.criar_secao_automacao()
        self.criar_secao_arquivo()
        self.criar_secao_execucao()
        self.criar_secao_progresso()
        self.criar_rodape()
        
    def criar_header(self):
        """Cria o cabe√ßalho principal com design corporativo"""
        header_frame = ctk.CTkFrame(self, height=100, corner_radius=0, fg_color=["#1f6aa5", "#144870"])
        header_frame.grid(row=0, column=0, sticky="ew", padx=20, pady=(20, 0))
        header_frame.grid_columnconfigure(1, weight=1)
        header_frame.grid_propagate(False)
        
        # Logo/√çcone
        logo_label = ctk.CTkLabel(
            header_frame, 
            text="üè¶", 
            font=ctk.CTkFont(size=48)
        )
        logo_label.grid(row=0, column=0, padx=(30, 15), pady=20)
        
        # T√≠tulo e subt√≠tulo
        title_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        title_frame.grid(row=0, column=1, sticky="w", pady=20)
        
        title_label = ctk.CTkLabel(
            title_frame,
            text="SISTEMA DE AUTOMA√á√ÉO BRADESCO PME",
            font=ctk.CTkFont(size=24, weight="bold"),
            text_color="white"
        )
        title_label.pack(anchor="w")
        
        subtitle_label = ctk.CTkLabel(
            title_frame,
            text="Processamento Profissional de Relat√≥rios | Vers√£o 2.0",
            font=ctk.CTkFont(size=12),
            text_color=["#e3f2fd", "#b3d9ff"]
        )
        subtitle_label.pack(anchor="w", pady=(2, 0))
        
    def criar_secao_automacao(self):
        """Se√ß√£o de sele√ß√£o do tipo de automa√ß√£o"""
        secao_frame = ctk.CTkFrame(self.main_container, corner_radius=0, fg_color=["#f8f9fa", "#2b2b2b"])
        secao_frame.grid(row=0, column=0, sticky="ew", pady=(20, 15), padx=15)
        secao_frame.grid_columnconfigure(1, weight=1)
        
        # T√≠tulo da se√ß√£o
        titulo_label = ctk.CTkLabel(
            secao_frame,
            text="1Ô∏è‚É£ SELECIONE O TIPO DE AUTOMA√á√ÉO",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=["#1f6aa5", "#4fc3f7"]
        )
        titulo_label.grid(row=0, column=0, columnspan=2, sticky="w", padx=20, pady=(20, 10))
        
        # Descri√ß√£o
        desc_label = ctk.CTkLabel(
            secao_frame,
            text="Escolha qual processo voc√™ deseja automatizar:",
            font=ctk.CTkFont(size=12),
            text_color=["#6c757d", "#a0a0a0"]
        )
        desc_label.grid(row=1, column=0, columnspan=2, sticky="w", padx=20, pady=(0, 15))
        
        # Container dos radio buttons
        radio_frame = ctk.CTkFrame(secao_frame, fg_color="transparent")
        radio_frame.grid(row=2, column=0, columnspan=2, sticky="ew", padx=20, pady=(0, 20))
        radio_frame.grid_columnconfigure((0, 1, 2), weight=1)
        
        # Vari?vel para radio buttons
        self.automacao_var = ctk.StringVar(value="Benefici?rio")

        # Op??es de automa??o com descri??es
        opcoes = [
            ("Benefici?rio", "Processa dados de\nbenefici?rios do plano", "*"),
            ("Procedimentos", "Analisa procedimentos\nm?dicos realizados", "*"),
            ("Prestadores", "Gerencia dados de\nprestadores de servi?o", "*"),
            ("Consultas", "Relat?rios consolidados de consultas", "*"),
            ("Diagn?sticos", "Indicadores de diagn?sticos", "*"),
            ("Exames", "Resultados e custos de exames", "*"),
            ("Terapias", "Informa??es de terapias realizadas", "*"),
        ]

        colunas = 3
        for indice, (valor, descricao, icone) in enumerate(opcoes):
            linha = indice // colunas
            coluna = indice % colunas
            radio_frame.grid_columnconfigure(coluna, weight=1)

            option_frame = ctk.CTkFrame(radio_frame, corner_radius=0)
            option_frame.grid(row=linha, column=coluna, sticky="ew", padx=5, pady=5)

            icon_label = ctk.CTkLabel(option_frame, text=icone, font=ctk.CTkFont(size=24))
            icon_label.pack(pady=(15, 5))

            radio = ctk.CTkRadioButton(
                option_frame,
                text=valor,
                variable=self.automacao_var,
                value=valor,
                font=ctk.CTkFont(size=12, weight="bold"),
                command=self.on_automacao_changed
            )
            radio.pack(pady=5)

            desc_label = ctk.CTkLabel(
                option_frame,
                text=descricao,
                font=ctk.CTkFont(size=10),
                text_color=["#6c757d", "#a0a0a0"],
                justify="center"
            )
            desc_label.pack(pady=(0, 12))

    def criar_secao_arquivo(self):
        """Se√ß√£o de sele√ß√£o de arquivo"""
        secao_frame = ctk.CTkFrame(self.main_container, corner_radius=0, fg_color=["#f8f9fa", "#2b2b2b"])
        secao_frame.grid(row=1, column=0, sticky="ew", pady=15, padx=15)
        secao_frame.grid_columnconfigure(0, weight=1)
        
        # T√≠tulo
        titulo_label = ctk.CTkLabel(
            secao_frame,
            text="2Ô∏è‚É£ SELECIONE O ARQUIVO EXCEL",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=["#1f6aa5", "#4fc3f7"]
        )
        titulo_label.grid(row=0, column=0, sticky="w", padx=20, pady=(20, 10))
        
        # Container do arquivo
        arquivo_container = ctk.CTkFrame(secao_frame, fg_color="transparent")
        arquivo_container.grid(row=1, column=0, sticky="ew", padx=20, pady=(0, 20))
        arquivo_container.grid_columnconfigure(0, weight=1)
        
        # Entry para mostrar arquivo
        self.arquivo_entry = ctk.CTkEntry(
            arquivo_container,
            height=40,
            placeholder_text="üìÑ Nenhum arquivo selecionado...",
            font=ctk.CTkFont(size=12),
            state="readonly"
        )
        self.arquivo_entry.grid(row=0, column=0, sticky="ew", pady=(0, 10))
        
        # Bot√£o de sele√ß√£o
        self.select_button = ctk.CTkButton(
            arquivo_container,
            text="üìÅ SELECIONAR ARQUIVO EXCEL",
            height=40,
            font=ctk.CTkFont(size=12, weight="bold"),
            command=self.selecionar_arquivo,
            fg_color=["#28a745", "#198754"],
            hover_color=["#218838", "#157347"]
        )
        self.select_button.grid(row=1, column=0, pady=(0, 10))
        
        # Info do arquivo
        self.arquivo_info = ctk.CTkLabel(
            arquivo_container,
            text="Formatos suportados: .xls, .xlsx",
            font=ctk.CTkFont(size=10),
            text_color=["#6c757d", "#a0a0a0"]
        )
        self.arquivo_info.grid(row=2, column=0)
        
    def criar_secao_execucao(self):
        """Se√ß√£o de execu√ß√£o da automa√ß√£o"""
        secao_frame = ctk.CTkFrame(self.main_container, corner_radius=0, fg_color=["#f8f9fa", "#2b2b2b"])
        secao_frame.grid(row=2, column=0, sticky="ew", pady=15, padx=15)
        secao_frame.grid_columnconfigure(0, weight=1)
        
        # T√≠tulo
        titulo_label = ctk.CTkLabel(
            secao_frame,
            text="3Ô∏è‚É£ EXECUTAR AUTOMA√á√ÉO",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=["#1f6aa5", "#4fc3f7"]
        )
        titulo_label.grid(row=0, column=0, sticky="w", padx=20, pady=(20, 10))
        
        # Container dos bot√µes
        button_container = ctk.CTkFrame(secao_frame, fg_color="transparent")
        button_container.grid(row=1, column=0, sticky="ew", padx=20, pady=(0, 20))
        button_container.grid_columnconfigure((0, 1), weight=1)
        
        # Bot√£o executar
        self.executar_button = ctk.CTkButton(
            button_container,
            text="üöÄ EXECUTAR AUTOMA√á√ÉO",
            height=50,
            font=ctk.CTkFont(size=14, weight="bold"),
            command=self.executar_automacao,
            fg_color=["#007bff", "#0056b3"],
            hover_color=["#0056b3", "#004085"]
        )
        self.executar_button.grid(row=0, column=0, sticky="ew", padx=(0, 10))
        
        # Bot√£o limpar
        self.limpar_button = ctk.CTkButton(
            button_container,
            text="üóëÔ∏è LIMPAR TUDO",
            height=50,
            font=ctk.CTkFont(size=14, weight="bold"),
            command=self.limpar_tudo,
            fg_color=["#6c757d", "#495057"],
            hover_color=["#545b62", "#343a40"]
        )
        self.limpar_button.grid(row=0, column=1, sticky="ew", padx=(10, 0))
        
    def criar_secao_progresso(self):
        """Se√ß√£o de progresso e logs"""
        secao_frame = ctk.CTkFrame(self.main_container, corner_radius=0, fg_color=["#f8f9fa", "#2b2b2b"])
        secao_frame.grid(row=3, column=0, sticky="ew", pady=15, padx=15)
        secao_frame.grid_columnconfigure(0, weight=1)
        secao_frame.grid_rowconfigure(2, weight=1)
        
        # T√≠tulo
        titulo_label = ctk.CTkLabel(
            secao_frame,
            text="üìä PROGRESSO E LOGS",
            font=ctk.CTkFont(size=16, weight="bold"),
            text_color=["#1f6aa5", "#4fc3f7"]
        )
        titulo_label.grid(row=0, column=0, sticky="w", padx=20, pady=(20, 10))
        
        # Barra de progresso
        self.progress_bar = ctk.CTkProgressBar(secao_frame, height=20)
        self.progress_bar.grid(row=1, column=0, sticky="ew", padx=20, pady=(0, 15))
        self.progress_bar.set(0)
        
        # √Årea de logs
        self.log_box = ctk.CTkTextbox(
            secao_frame,
            height=200,
            font=ctk.CTkFont(family="Consolas", size=11),
            wrap="word"
        )
        self.log_box.grid(row=2, column=0, sticky="ew", padx=20, pady=(0, 20))

        
        # Mensagem inicial
        if MODULOS_DISPONIVEL:
            self.adicionar_log("üè¶ Sistema de Automa√ß√£o Bradesco PME iniciado")
            self.adicionar_log("üìù Selecione o tipo de automa√ß√£o e o arquivo Excel para come√ßar")
            self.adicionar_log("‚úÖ M√≥dulos de automa√ß√£o carregados com sucesso")
        else:
            self.adicionar_log("üè¶ Sistema de Automa√ß√£o Bradesco PME iniciado")
            self.adicionar_log("‚ö†Ô∏è ATEN√á√ÉO: M√≥dulos de automa√ß√£o n√£o encontrados!")
            self.adicionar_log("üìÅ Verifique se a pasta 'beneficiarios' existe com os arquivos necess√°rios")
        
    def criar_rodape(self):
        """Cria o rodap√© com informa√ß√µes do sistema"""
        rodape_frame = ctk.CTkFrame(self.main_container, corner_radius=0, height=60, fg_color=["#e9ecef", "#1e1e1e"])
        rodape_frame.grid(row=4, column=0, sticky="ew", pady=(15, 0), padx=15)
        rodape_frame.grid_propagate(False)
        
        # Info do sistema
        info_label = ctk.CTkLabel(
            rodape_frame,
            text=f"¬© 2025 Sistema de Automa√ß√£o Bradesco PME | Vers√£o 2.0 | {datetime.now().strftime('%d/%m/%Y %H:%M')}",
            font=ctk.CTkFont(size=10),
            text_color=["#6c757d", "#a0a0a0"]
        )
        info_label.place(relx=0.5, rely=0.5, anchor="center")
        
    def on_automacao_changed(self):
        """Callback quando o tipo de automa√ß√£o √© alterado"""
        tipo = self.automacao_var.get()
        self.adicionar_log(f"‚úÖ Automa√ß√£o selecionada: {tipo}")
        
        # Mensagens espec√≠ficas por tipo
        if tipo == "Benefici√°rio":
            self.adicionar_log("üí° Esta automa√ß√£o processa relat√≥rios de benefici√°rios do plano de sa√∫de")
            if MODULOS_DISPONIVEL:
                self.adicionar_log("‚úÖ M√≥dulos de benefici√°rios prontos para uso")
            else:
                self.adicionar_log("‚ö†Ô∏è M√≥dulos de benefici√°rios n√£o encontrados")
        elif tipo == "Procedimentos":
            self.adicionar_log("üí° Esta automa√ß√£o processa relat√≥rios de procedimentos m√©dicos")
            if MODULOS_DISPONIVEL:
                self.adicionar_log("‚úÖ M√≥dulos de procedimentos prontos para uso")
            else:
                self.adicionar_log("‚ö†Ô∏è M√≥dulos de procedimentos n√£o encontrados")
        elif tipo == "Prestadores":
            self.adicionar_log("üí° Esta automa√ß√£o processa relat√≥rios de prestadores de servi√ßos")
            if MODULOS_DISPONIVEL:
                self.adicionar_log("‚úÖ M√≥dulos de prestadores prontos para uso")
            else:
                self.adicionar_log("‚ö†Ô∏è M√≥dulos de prestadores n√£o encontrados")
            
        elif tipo == "Consultas":
            self.adicionar_log("Esta automa??o processa relat?rios de consultas")
            if MODULOS_DISPONIVEL:
                self.adicionar_log("M?dulos de consultas prontos para uso")
            else:
                self.adicionar_log("M?dulos de consultas n?o encontrados")
        elif tipo == "Diagn?sticos":
            self.adicionar_log("Esta automa??o processa relat?rios de diagn?sticos")
            if MODULOS_DISPONIVEL:
                self.adicionar_log("M?dulos de diagn?sticos prontos para uso")
            else:
                self.adicionar_log("M?dulos de diagn?sticos n?o encontrados")
        elif tipo == "Exames":
            self.adicionar_log("Esta automa??o processa relat?rios de exames")
            if MODULOS_DISPONIVEL:
                self.adicionar_log("M?dulos de exames prontos para uso")
            else:
                self.adicionar_log("M?dulos de exames n?o encontrados")
        elif tipo == "Terapias":
            self.adicionar_log("Esta automa??o processa relat?rios de terapias")
            if MODULOS_DISPONIVEL:
                self.adicionar_log("M?dulos de terapias prontos para uso")
            else:
                self.adicionar_log("M?dulos de terapias n?o encontrados")

        self.atualizar_estado_botoes()

    def selecionar_arquivo(self):
        """Abre dialog para sele√ß√£o de arquivo Excel"""
        tipos_arquivo = [
            ("Arquivos Excel", "*.xls *.xlsx"),
            ("Todos os arquivos", "*.*")
        ]
        
        arquivo = filedialog.askopenfilename(
            title="Selecione o arquivo Excel para processamento",
            filetypes=tipos_arquivo,
            initialdir=os.path.expanduser("~")
        )
        
        if arquivo:
            self.arquivo_selecionado = arquivo
            nome_arquivo = os.path.basename(arquivo)
            
            # Atualiza a interface
            self.arquivo_entry.configure(state="normal")
            self.arquivo_entry.delete(0, "end")
            self.arquivo_entry.insert(0, f"üìÑ {nome_arquivo}")
            self.arquivo_entry.configure(state="readonly")
            
            # Informa√ß√µes do arquivo
            tamanho = os.path.getsize(arquivo)
            tamanho_mb = tamanho / (1024 * 1024)
            
            self.adicionar_log(f"üìÅ Arquivo selecionado: {nome_arquivo}")
            self.adicionar_log(f"üìä Tamanho: {tamanho_mb:.2f} MB | Caminho: {arquivo}")
            
            self.atualizar_estado_botoes()

    def executar_automacao(self):
        """Executa a automa√ß√£o selecionada"""
        if not self.validar_inputs():
            return
            
        # Desabilita controles durante execu√ß√£o
        self.executando = True
        self.atualizar_estado_botoes()
        
        # Inicia thread para n√£o travar a interface
        thread = threading.Thread(target=self._executar_automacao_thread, daemon=True)
        thread.start()
        
    def _validar_tipo_arquivo(self, arquivo, tipo_automacao):
        """Valida se o arquivo √© compat√≠vel com o tipo de automa√ß√£o selecionado"""
        try:
            import pandas as pd
            
            # Tenta ler o arquivo para an√°lise b√°sica
            df = pd.read_excel(arquivo, nrows=15)  # L√™ apenas as primeiras 15 linhas
            
            if tipo_automacao == "Benefici√°rio":
                # Arquivo de benefici√°rios tem dados espec√≠ficos como 'Ranking de Benefici√°rios'
                # Verifica se encontra ind√≠cios de estrutura de benefici√°rios
                conteudo_str = df.to_string().lower()
                if any(keyword in conteudo_str for keyword in ['beneficiar', 'ranking', 'certificado']):
                    return True, ""
                else:
                    return False, "O arquivo selecionado n√£o parece ser um relat√≥rio de benefici√°rios."
                    
            elif tipo_automacao == "Prestadores":
                # Arquivo de prestadores tem estrutura espec√≠fica
                conteudo_str = df.to_string().lower()
                if any(keyword in conteudo_str for keyword in ['prestador', 'valor', 'c√≥digo']):
                    return True, ""
                else:
                    return False, "O arquivo selecionado n√£o parece ser um relat√≥rio de prestadores."
                    
            elif tipo_automacao == "Procedimentos":
                # Arquivo de procedimentos tem estrutura espec√≠fica
                conteudo_str = df.to_string().lower()
                if any(keyword in conteudo_str for keyword in ['procedimento', 'custo', 'ranking']):
                    return True, ""
                else:
                    return False, "O arquivo selecionado n√£o parece ser um relat√≥rio de procedimentos."
                    
            return True, ""  # Por padr√£o, aceita o arquivo
            
        except Exception as e:
            # Se n√£o conseguir ler o arquivo, aceita mas avisa
            return True, f"‚ö†Ô∏è N√£o foi poss√≠vel validar o tipo do arquivo: {str(e)}"

    def _executar_consultas(self, arquivo):
        """Executa a automa√ß√£o espec√≠fica de consultas"""
        try:
            if not MODULOS_DISPONIVEL:
                raise Exception("M√≥dulos de consultas n√£o est√£o dispon√≠veis")

            self.adicionar_log("Lendo arquivo de consultas...")
            self.atualizar_progresso(0.2)
            dados = consultas_read(arquivo)
            if not dados:
                raise Exception("Nenhum dado de consultas encontrado no arquivo")
            self.adicionar_log(f"{len(dados)} registros de consultas carregados")
            self.atualizar_progresso(0.5)

            self.adicionar_log("Salvando resultado em databases/consultas.xlsx ...")
            caminho_destino = "databases/consultas.xlsx"
            os.makedirs(os.path.dirname(caminho_destino), exist_ok=True)
            with self._capturar_saida_console() as saida:
                consultas_append(caminho_destino, dados)

            saida_texto = saida.getvalue().lower()
            self._processar_mensagens_append(saida)
            if "existentes" in saida_texto:
                self.after(0, lambda: messagebox.showwarning(
                    "Duplicatas detectadas",
                    "Dados j√° existentes para consultas. Nada foi inserido."
                ))
            else:
                self.after(0, lambda: messagebox.showinfo(
                    "Sucesso",
                    "Automa√ß√£o de consultas conclu√≠da com sucesso."
                ))

            self.atualizar_progresso(1.0)
            self.adicionar_log("Automa√ß√£o de consultas conclu√≠da.")
            self.adicionar_log(f"Arquivo salvo em: {os.path.abspath(caminho_destino)}")
        except Exception as e:
            raise Exception(f"Erro na automa√ß√£o de consultas: {str(e)}")

    def _executar_diagnosticos(self, arquivo):
        """Executa a automa√ß√£o espec√≠fica de diagn√≥sticos"""
        try:
            if not MODULOS_DISPONIVEL:
                raise Exception("M√≥dulos de diagn√≥sticos n√£o est√£o dispon√≠veis")

            self.adicionar_log("Lendo arquivo de diagn√≥sticos...")
            self.atualizar_progresso(0.2)
            dados = diagnosticos_read(arquivo)
            if not dados:
                raise Exception("Nenhum dado de diagn√≥sticos encontrado no arquivo")
            self.adicionar_log(f"{len(dados)} registros de diagn√≥sticos carregados")
            self.atualizar_progresso(0.5)

            self.adicionar_log("Salvando resultado em databases/diagnosticos.xlsx ...")
            caminho_destino = "databases/diagnosticos.xlsx"
            os.makedirs(os.path.dirname(caminho_destino), exist_ok=True)
            with self._capturar_saida_console() as saida:
                diagnosticos_append(caminho_destino, dados)

            saida_texto = saida.getvalue().lower()
            self._processar_mensagens_append(saida)
            if "existentes" in saida_texto:
                self.after(0, lambda: messagebox.showwarning(
                    "Duplicatas detectadas",
                    "Dados j√° existentes para diagn√≥sticos. Nada foi inserido."
                ))
            else:
                self.after(0, lambda: messagebox.showinfo(
                    "Sucesso",
                    "Automa√ß√£o de diagn√≥sticos conclu√≠da com sucesso."
                ))

            self.atualizar_progresso(1.0)
            self.adicionar_log("Automa√ß√£o de diagn√≥sticos conclu√≠da.")
            self.adicionar_log(f"Arquivo salvo em: {os.path.abspath(caminho_destino)}")
        except Exception as e:
            raise Exception(f"Erro na automa√ß√£o de diagn√≥sticos: {str(e)}")

    def _executar_exames(self, arquivo):
        """Executa a automa√ß√£o espec√≠fica de exames"""
        try:
            if not MODULOS_DISPONIVEL:
                raise Exception("M√≥dulos de exames n√£o est√£o dispon√≠veis")

            self.adicionar_log("Lendo arquivo de exames...")
            self.atualizar_progresso(0.2)
            dados = exames_read(arquivo)
            if not dados:
                raise Exception("Nenhum dado de exames encontrado no arquivo")
            self.adicionar_log(f"{len(dados)} registros de exames carregados")
            self.atualizar_progresso(0.5)

            self.adicionar_log("Salvando resultado em databases/exames.xlsx ...")
            caminho_destino = "databases/exames.xlsx"
            os.makedirs(os.path.dirname(caminho_destino), exist_ok=True)
            with self._capturar_saida_console() as saida:
                exames_append(caminho_destino, dados)

            saida_texto = saida.getvalue().lower()
            self._processar_mensagens_append(saida)
            if "existentes" in saida_texto:
                self.after(0, lambda: messagebox.showwarning(
                    "Duplicatas detectadas",
                    "Dados j√° existentes para exames. Nada foi inserido."
                ))
            else:
                self.after(0, lambda: messagebox.showinfo(
                    "Sucesso",
                    "Automa√ß√£o de exames conclu√≠da com sucesso."
                ))

            self.atualizar_progresso(1.0)
            self.adicionar_log("Automa√ß√£o de exames conclu√≠da.")
            self.adicionar_log(f"Arquivo salvo em: {os.path.abspath(caminho_destino)}")
        except Exception as e:
            raise Exception(f"Erro na automa√ß√£o de exames: {str(e)}")

    def _executar_terapias(self, arquivo):
        """Executa a automa√ß√£o espec√≠fica de terapias"""
        try:
            if not MODULOS_DISPONIVEL:
                raise Exception("M√≥dulos de terapias n√£o est√£o dispon√≠veis")

            self.adicionar_log("Lendo arquivo de terapias...")
            self.atualizar_progresso(0.2)
            dados = terapias_read(arquivo)
            if not dados:
                raise Exception("Nenhum dado de terapias encontrado no arquivo")
            self.adicionar_log(f"{len(dados)} registros de terapias carregados")
            self.atualizar_progresso(0.5)

            self.adicionar_log("Salvando resultado em databases/terapias.xlsx ...")
            caminho_destino = "databases/terapias.xlsx"
            os.makedirs(os.path.dirname(caminho_destino), exist_ok=True)
            with self._capturar_saida_console() as saida:
                terapias_append(caminho_destino, dados)

            saida_texto = saida.getvalue().lower()
            self._processar_mensagens_append(saida)
            if "existentes" in saida_texto:
                self.after(0, lambda: messagebox.showwarning(
                    "Duplicatas detectadas",
                    "Dados j√° existentes para terapias. Nada foi inserido."
                ))
            else:
                self.after(0, lambda: messagebox.showinfo(
                    "Sucesso",
                    "Automa√ß√£o de terapias conclu√≠da com sucesso."
                ))

            self.atualizar_progresso(1.0)
            self.adicionar_log("Automa√ß√£o de terapias conclu√≠da.")
            self.adicionar_log(f"Arquivo salvo em: {os.path.abspath(caminho_destino)}")
        except Exception as e:
            raise Exception(f"Erro na automa√ß√£o de terapias: {str(e)}")


    def _executar_automacao_thread(self):
        """Executa a automa√ß√£o em thread separada"""
        try:
            tipo = self.automacao_var.get()
            arquivo = self.arquivo_selecionado
            
            self.adicionar_log("üöÄ Iniciando processamento...")
            self.atualizar_progresso(0.1)
            
            # Valida√ß√£o do tipo de arquivo
            self.adicionar_log("üîç Validando compatibilidade do arquivo...")
            arquivo_valido, msg_erro = self._validar_tipo_arquivo(arquivo, tipo)
            
            if not arquivo_valido:
                self.adicionar_log(f"‚ùå {msg_erro}")
                self.adicionar_log("üí° Verifique se voc√™ selecionou o arquivo correto para o tipo de automa√ß√£o escolhido.")
                messagebox.showerror("Arquivo Incompat√≠vel", 
                    f"{msg_erro}\n\n"
                    f"Tipo selecionado: {tipo}\n"
                    f"Arquivo: {os.path.basename(arquivo)}\n\n"
                    f"Por favor, selecione o arquivo correto ou altere o tipo de automa√ß√£o.")
                return
            elif msg_erro:
                self.adicionar_log(msg_erro)
            else:
                self.adicionar_log("‚úÖ Arquivo compat√≠vel com o tipo de automa√ß√£o selecionado")
            
            if tipo == "Benefici√°rio":
                self._executar_beneficiario(arquivo)
            elif tipo == "Procedimentos":
                self._executar_procedimentos(arquivo)
            elif tipo == "Prestadores":
                self._executar_prestadores(arquivo)
            elif tipo == "Consultas":
                self._executar_consultas(arquivo)
            elif tipo == "Diagn√≥sticos":
                self._executar_diagnosticos(arquivo)
            elif tipo == "Exames":
                self._executar_exames(arquivo)
            elif tipo == "Terapias":
                self._executar_terapias(arquivo)
            else:
                self.adicionar_log(f"‚ö†Ô∏è Automa√ß√£o '{tipo}' ainda n√£o est√° implementada")
                self.adicionar_log("üìß Entre em contato com o suporte para mais informa√ß√µes")
                
        except Exception as e:
            self.adicionar_log(f"‚ùå Erro durante execu√ß√£o: {str(e)}")
            messagebox.showerror("Erro", f"Erro durante a automa√ß√£o:\n{str(e)}")
        finally:
            self.executando = False
            self.atualizar_progresso(0)
            self.after(0, self.atualizar_estado_botoes)
            
    @contextlib.contextmanager
    def _capturar_saida_console(self):
        """Context manager para capturar a sa√≠da do console (prints)"""
        old_stdout = sys.stdout
        stdout_capture = StringIO()
        try:
            sys.stdout = stdout_capture
            yield stdout_capture
        finally:
            sys.stdout = old_stdout

    def _processar_mensagens_append(self, saida_capturada):
        """Processa as mensagens capturadas do m√≥dulo append e adiciona aos logs"""
        mensagens = saida_capturada.getvalue().strip()
        
        if mensagens:
            self.adicionar_log("üìã Mensagens do sistema de grava√ß√£o:")
            for linha in mensagens.split('\n'):
                linha = linha.strip()
                if linha:
                    # Detecta diferentes tipos de mensagens
                    if "Dados j√° existentes" in linha or "j√° existentes" in linha:
                        self.adicionar_log(f"üîÑ {linha}")
                        self.adicionar_log("‚úÖ Sistema de prote√ß√£o contra duplicatas funcionando corretamente!")
                        self.adicionar_log("üìä Dados n√£o foram duplicados - integridade preservada")
                        
                        # Extrair detalhes das duplicatas se poss√≠vel
                        if "contratos/compet√™ncias:" in linha:
                            detalhes = linha.split("contratos/compet√™ncias:")[1].split(".")[0].strip()
                            self.adicionar_log(f"üìù Detalhes: {detalhes}")
                            
                    elif "adicionados com sucesso" in linha or "sucesso" in linha:
                        self.adicionar_log(f"‚úÖ {linha}")
                    elif "Planilha criada" in linha or "criada" in linha:
                        self.adicionar_log(f"üìÑ {linha}")
                    elif linha.startswith("‚ö†Ô∏è") or linha.startswith("‚úÖ"):
                        # Mensagens que j√° t√™m emoji
                        self.adicionar_log(linha)
                    else:
                        # Outras mensagens do sistema
                        self.adicionar_log(f"‚ÑπÔ∏è {linha}")
        else:
            self.adicionar_log("üìã Processamento silencioso - sem mensagens adicionais")

    def _executar_prestadores(self, arquivo):
            """Executa a automa√ß√£o espec√≠fica de Prestadores"""
            try:
                if not MODULOS_DISPONIVEL:
                    raise Exception("M√≥dulos de prestadores n√£o est√£o dispon√≠veis")

                # 1. Lendo arquivo Excel
                self.adicionar_log("üìñ Lendo arquivo Excel...")
                self.atualizar_progresso(0.2)

                # Chama a fun√ß√£o real de leitura
                dados = prestadores_read(arquivo)

                if not dados:
                    raise Exception("Nenhum dado foi encontrado no arquivo")

                self.adicionar_log(f"‚úÖ Dados lidos com sucesso! {len(dados)} registros encontrados")
                self.atualizar_progresso(0.5)

                # 2. Processando e formatando dados
                self.adicionar_log("üîÑ Processando e formatando dados...")
                self.atualizar_progresso(0.7)

                # 3. Salvando na planilha de destino
                self.adicionar_log("üíæ Salvando resultados na planilha consolidada...")
                self.adicionar_log("üîç Verificando duplicatas baseado em contrato + compet√™ncia...")

                # Garante que a pasta databases existe
                caminho_destino = 'databases/prestadores.xlsx'
                os.makedirs(os.path.dirname(caminho_destino), exist_ok=True)

                # Captura a sa√≠da do console durante o append
                with self._capturar_saida_console() as saida:
                    prestadores_append(caminho_destino, dados)
                
                # Processa as mensagens capturadas
                saida_texto = saida.getvalue().strip()
                
                # DEBUG: Mostra o que foi capturado
                self.adicionar_log(f"üîß DEBUG: Texto capturado do console: '{saida_texto}'")
                
                # Verifica especificamente por duplicatas
                if "j√° existentes" in saida_texto or "Dados j√° existentes" in saida_texto:
                    self.adicionar_log("üîÑ DUPLICATAS DETECTADAS!")
                    self._processar_mensagens_append(saida)
                    self.adicionar_log("üõ°Ô∏è PROTE√á√ÉO ATIVA: Dados duplicados foram rejeitados automaticamente")
                    
                    # Popup espec√≠fico para duplicatas
                    self.after(0, lambda: messagebox.showwarning(
                        "Duplicatas Detectadas", 
                        f"‚ö†Ô∏è DADOS J√Å EXISTENTES DETECTADOS!\n\n"
                        f"O sistema identificou que os dados do arquivo:\n"
                        f"'{os.path.basename(arquivo)}'\n\n"
                        f"J√° existem na base de dados para o mesmo contrato e compet√™ncia.\n\n"
                        f"‚úÖ PROTE√á√ÉO ATIVA: Nenhum dado foi duplicado!\n"
                        f"üìä Sistema funcionando corretamente."
                    ))
                else:
                    # Processa mensagens normais
                    self._processar_mensagens_append(saida)
                    
                    # Popup de sucesso normal
                    self.after(0, lambda: messagebox.showinfo(
                        "Sucesso", 
                        f"Automa√ß√£o de prestadores conclu√≠da com sucesso!\n\n"
                        f"‚Ä¢ {len(dados)} registros processados\n"
                        f"‚Ä¢ Resultados salvos em: databases/prestadores.xlsx\n"
                        f"‚Ä¢ Arquivo de origem: {os.path.basename(arquivo)}"
                    ))

                self.atualizar_progresso(1.0)
                self.adicionar_log("‚úÖ Automa√ß√£o conclu√≠da com sucesso!")
                self.adicionar_log(f"üìÇ Resultados salvos em: {os.path.abspath(caminho_destino)}")
                self.adicionar_log(f"üìä Total de {len(dados)} registros processados")

            except Exception as e:
                raise Exception(f"Erro na automa√ß√£o de prestadores: {str(e)}")
                    
    def _executar_procedimentos(self, arquivo):
            """Executa a automa√ß√£o espec√≠fica de Procedimentos"""
            try:
                if not MODULOS_DISPONIVEL:
                    raise Exception("M√≥dulos de procedimentos n√£o est√£o dispon√≠veis")

                # 1. Lendo arquivo Excel
                self.adicionar_log("üìñ Lendo arquivo Excel...")
                self.atualizar_progresso(0.2)

                # Chama a fun√ß√£o real de leitura
                dados = procedimentos_read(arquivo)

                if not dados:
                    raise Exception("Nenhum dado foi encontrado no arquivo")

                self.adicionar_log(f"‚úÖ Dados lidos com sucesso! {len(dados)} registros encontrados")
                self.atualizar_progresso(0.5)

                # 2. Processando e formatando dados
                self.adicionar_log("üîÑ Processando e formatando dados...")
                self.atualizar_progresso(0.7)

                # 3. Salvando na planilha de destino
                self.adicionar_log("üíæ Salvando resultados na planilha consolidada...")
                self.adicionar_log("üîç Verificando duplicatas baseado em contrato + compet√™ncia...")

                # Garante que a pasta databases existe
                caminho_destino = 'databases/procedimentos.xlsx'
                os.makedirs(os.path.dirname(caminho_destino), exist_ok=True)

                # Captura a sa√≠da do console durante o append
                with self._capturar_saida_console() as saida:
                    procedimentos_append(caminho_destino, dados)
                
                # Processa as mensagens capturadas
                saida_texto = saida.getvalue().strip()
                
                # DEBUG: Mostra o que foi capturado
                self.adicionar_log(f"üîß DEBUG: Texto capturado do console: '{saida_texto}'")
                
                # Verifica especificamente por duplicatas
                if "j√° existentes" in saida_texto or "Dados j√° existentes" in saida_texto:
                    self.adicionar_log("üîÑ DUPLICATAS DETECTADAS!")
                    self._processar_mensagens_append(saida)
                    self.adicionar_log("üõ°Ô∏è PROTE√á√ÉO ATIVA: Dados duplicados foram rejeitados automaticamente")
                    
                    # Popup espec√≠fico para duplicatas
                    self.after(0, lambda: messagebox.showwarning(
                        "Duplicatas Detectadas", 
                        f"‚ö†Ô∏è DADOS J√Å EXISTENTES DETECTADOS!\n\n"
                        f"O sistema identificou que os dados do arquivo:\n"
                        f"'{os.path.basename(arquivo)}'\n\n"
                        f"J√° existem na base de dados para o mesmo contrato e compet√™ncia.\n\n"
                        f"‚úÖ PROTE√á√ÉO ATIVA: Nenhum dado foi duplicado!\n"
                        f"üìä Sistema funcionando corretamente."
                    ))
                else:
                    # Processa mensagens normais
                    self._processar_mensagens_append(saida)
                    
                    # Popup de sucesso normal
                    self.after(0, lambda: messagebox.showinfo(
                        "Sucesso", 
                        f"Automa√ß√£o de procedimentos conclu√≠da com sucesso!\n\n"
                        f"‚Ä¢ {len(dados)} registros processados\n"
                        f"‚Ä¢ Resultados salvos em: databases/procedimentos.xlsx\n"
                        f"‚Ä¢ Arquivo de origem: {os.path.basename(arquivo)}"
                    ))

                self.atualizar_progresso(1.0)
                self.adicionar_log("‚úÖ Automa√ß√£o conclu√≠da com sucesso!")
                self.adicionar_log(f"üìÇ Resultados salvos em: {os.path.abspath(caminho_destino)}")
                self.adicionar_log(f"üìä Total de {len(dados)} registros processados")

            except Exception as e:
                raise Exception(f"Erro na automa√ß√£o de procedimentos: {str(e)}")
        
        
    def _executar_beneficiario(self, arquivo):
        """Executa a automa√ß√£o espec√≠fica de benefici√°rios"""
        try:
            if not MODULOS_DISPONIVEL:
                raise Exception("M√≥dulos de benefici√°rios n√£o est√£o dispon√≠veis")
            
            # 1. Lendo arquivo Excel
            self.adicionar_log("üìñ Lendo arquivo Excel...")
            self.atualizar_progresso(0.2)
            
            # Chama a fun√ß√£o real de leitura
            dados = beneficiarios_read(arquivo)
            
            if not dados:
                raise Exception("Nenhum dado foi encontrado no arquivo")
                
            self.adicionar_log(f"‚úÖ Dados lidos com sucesso! {len(dados)} registros encontrados")
            self.atualizar_progresso(0.5)
            
            # 2. Processando e formatando dados
            self.adicionar_log("üîÑ Processando e formatando dados...")
            self.atualizar_progresso(0.7)
            
            # 3. Salvando na planilha de destino
            self.adicionar_log("üíæ Salvando resultados na planilha consolidada...")
            self.adicionar_log("üîç Verificando duplicatas baseado em contrato + compet√™ncia...")
            
            # Garante que a pasta databases existe
            caminho_destino = 'databases/despesas.xlsx'
            os.makedirs(os.path.dirname(caminho_destino), exist_ok=True)
            
            # Captura a sa√≠da do console durante o append
            with self._capturar_saida_console() as saida:
                resultado_append = beneficarios_append(caminho_destino, dados)
            
            # Processa as mensagens capturadas
            saida_texto = saida.getvalue().strip()
            
            # DEBUG: Mostra o que foi capturado
            self.adicionar_log(f"üîß DEBUG: Texto capturado do console: '{saida_texto}'")
            
            # Verifica especificamente por duplicatas
            if "j√° existentes" in saida_texto or "Dados j√° existentes" in saida_texto:
                self.adicionar_log("üîÑ DUPLICATAS DETECTADAS!")
                self._processar_mensagens_append(saida)
                self.adicionar_log("ÔøΩÔ∏è PROTE√á√ÉO ATIVA: Dados duplicados foram rejeitados automaticamente")
                
                # Popup espec√≠fico para duplicatas
                self.after(0, lambda: messagebox.showwarning(
                    "Duplicatas Detectadas", 
                    f"‚ö†Ô∏è DADOS J√Å EXISTENTES DETECTADOS!\n\n"
                    f"O sistema identificou que os dados do arquivo:\n"
                    f"'{os.path.basename(arquivo)}'\n\n"
                    f"J√° existem na base de dados para o mesmo contrato e compet√™ncia.\n\n"
                    f"‚úÖ PROTE√á√ÉO ATIVA: Nenhum dado foi duplicado!\n"
                    f"üìä Sistema funcionando corretamente."
                ))
            else:
                # Processa mensagens normais
                self._processar_mensagens_append(saida)
                
                # Popup de sucesso normal
                self.after(0, lambda: messagebox.showinfo(
                    "Sucesso", 
                    f"Automa√ß√£o de benefici√°rios conclu√≠da com sucesso!\n\n"
                    f"‚Ä¢ {len(dados)} registros processados\n"
                    f"‚Ä¢ Resultados salvos em: databases/despesas.xlsx\n"
                    f"‚Ä¢ Arquivo de origem: {os.path.basename(arquivo)}"
                ))
            
            self.atualizar_progresso(1.0)
            self.adicionar_log("‚úÖ Automa√ß√£o conclu√≠da com sucesso!")
            self.adicionar_log(f"üìÇ Resultados salvos em: {os.path.abspath(caminho_destino)}")
            self.adicionar_log(f"üìä Total de {len(dados)} registros processados")
            
        except Exception as e:
            raise Exception(f"Erro na automa√ß√£o de benefici√°rios: {str(e)}")
            
    def validar_inputs(self):
        """Valida se todos os inputs necess√°rios est√£o preenchidos"""
        if not self.arquivo_selecionado:
            self.adicionar_log("‚ö†Ô∏è Erro: Nenhum arquivo selecionado!")
            messagebox.showwarning("Aten√ß√£o", "Por favor, selecione um arquivo Excel primeiro.")
            return False
            
        if not os.path.exists(self.arquivo_selecionado):
            self.adicionar_log("‚ö†Ô∏è Erro: Arquivo n√£o encontrado!")
            messagebox.showerror("Erro", "O arquivo selecionado n√£o foi encontrado.")
            return False
            
        # Valida√ß√£o espec√≠fica para benefici√°rios
        if self.automacao_var.get() == "Benefici√°rio" and not MODULOS_DISPONIVEL:
            self.adicionar_log("‚ö†Ô∏è Erro: M√≥dulos de benefici√°rios n√£o dispon√≠veis!")
            messagebox.showerror("Erro", 
                "Os m√≥dulos de automa√ß√£o de benefici√°rios n√£o est√£o dispon√≠veis.\n\n"
                "Verifique se existem os arquivos:\n"
                "‚Ä¢ beneficiarios/ler_excel.py\n"
                "‚Ä¢ beneficiarios/append_excel.py")
            return False
        
        # Valida√ß√£o espec√≠fica para prestadores    
        if self.automacao_var.get() == "Prestadores" and not MODULOS_DISPONIVEL:
            self.adicionar_log("‚ö†Ô∏è Erro: M√≥dulos de prestadores n√£o dispon√≠veis!")
            messagebox.showerror("Erro", 
                "Os m√≥dulos de automa√ß√£o de prestadores n√£o est√£o dispon√≠veis.\n\n"
                "Verifique se existem os arquivos:\n"
                "‚Ä¢ prestadores/ler_excel.py\n"
                "‚Ä¢ prestadores/append_excel.py")
            return False
            
        # Valida√ß√£o espec√≠fica para procedimentos
        if self.automacao_var.get() == "Procedimentos" and not MODULOS_DISPONIVEL:
            self.adicionar_log("‚ö†Ô∏è Erro: M√≥dulos de procedimentos n√£o dispon√≠veis!")
            messagebox.showerror("Erro", 
                "Os m√≥dulos de automa√ß√£o de procedimentos n√£o est√£o dispon√≠veis.\n\n"
                "Verifique se existem os arquivos:\n"
                "‚Ä¢ procedimentos/ler_excel.py\n"
                "‚Ä¢ procedimentos/append_excel.py")
            return False
            
        if self.automacao_var.get() == "Consultas" and not MODULOS_DISPONIVEL:
            self.adicionar_log("Erro: M√≥dulos de consultas n√£o dispon√≠veis!")
            messagebox.showerror(
                "Erro",
                "Os m√≥dulos de automa√ß√£o de consultas n√£o est√£o dispon√≠veis.\n\n"
                "Verifique se existem os arquivos:\n"
                "- consultas/ler_excel.py\n"
                "- consultas/append_excel.py"
            )
            return False

        if self.automacao_var.get() == "Diagn√≥sticos" and not MODULOS_DISPONIVEL:
            self.adicionar_log("Erro: M√≥dulos de diagn√≥sticos n√£o dispon√≠veis!")
            messagebox.showerror(
                "Erro",
                "Os m√≥dulos de automa√ß√£o de diagn√≥sticos n√£o est√£o dispon√≠veis.\n\n"
                "Verifique se existem os arquivos:\n"
                "- diagnosticos/ler_excel.py\n"
                "- diagnosticos/append_excel.py"
            )
            return False

        if self.automacao_var.get() == "Exames" and not MODULOS_DISPONIVEL:
            self.adicionar_log("Erro: M√≥dulos de exames n√£o dispon√≠veis!")
            messagebox.showerror(
                "Erro",
                "Os m√≥dulos de automa√ß√£o de exames n√£o est√£o dispon√≠veis.\n\n"
                "Verifique se existem os arquivos:\n"
                "- exames/ler_excel.py\n"
                "- exames/append_excel.py"
            )
            return False

        if self.automacao_var.get() == "Terapias" and not MODULOS_DISPONIVEL:
            self.adicionar_log("Erro: M√≥dulos de terapias n√£o dispon√≠veis!")
            messagebox.showerror(
                "Erro",
                "Os m√≥dulos de automa√ß√£o de terapias n√£o est√£o dispon√≠veis.\n\n"
                "Verifique se existem os arquivos:\n"
                "- terapias/ler_excel.py\n"
                "- terapias/append_excel.py"
            )
            return False

        return True
        
    def atualizar_estado_botoes(self):
        """Atualiza o estado dos bot√µes baseado no estado atual"""
        if self.executando:
            self.executar_button.configure(
                state="disabled",
                text="‚è≥ PROCESSANDO...",
                fg_color=["#6c757d", "#495057"]
            )
            self.select_button.configure(state="disabled")
            self.limpar_button.configure(state="disabled")
        else:
            self.executar_button.configure(
                state="normal",
                text="üöÄ EXECUTAR AUTOMA√á√ÉO",
                fg_color=["#007bff", "#0056b3"]
            )
            self.select_button.configure(state="normal")
            self.limpar_button.configure(state="normal")
            
    def atualizar_progresso(self, valor):
        """Atualiza a barra de progresso"""
        self.after(0, lambda: self.progress_bar.set(valor))
        
    def limpar_tudo(self):
        """Limpa todas as sele√ß√µes e logs"""
        self.arquivo_selecionado = None
        self.automacao_var.set("Benefici√°rio")
        
        self.arquivo_entry.configure(state="normal")
        self.arquivo_entry.delete(0, "end")
        self.arquivo_entry.configure(state="readonly", placeholder_text="üìÑ Nenhum arquivo selecionado...")
        
        self.log_box.delete(1.0, "end")
        self.progress_bar.set(0)
        
        self.adicionar_log("üßπ Sistema limpo - Pronto para nova automa√ß√£o")
        self.atualizar_estado_botoes()

    def adicionar_log(self, mensagem):
        """Adiciona mensagem ao log com timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        mensagem_formatada = f"[{timestamp}] {mensagem}"
        
        self.log_box.insert("end", mensagem_formatada + "\n")
        self.log_box.see("end")


if __name__ == "__main__":
    app = AutomacaoBradescoApp()
    app.mainloop()
